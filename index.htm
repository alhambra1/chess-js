<html>
<head>

<title>Chess</title>

<script>
var imagesOn = 1, 
  animation = 1,
  animation_speed = 1000,
  colorBlack = '#0066cc', // original: #aaa
  colorWhite = '#cccbbb' // original: #ddd
</script>

<script src="bin.js"></script><!-- binary engine-->

<script src="http://code.jquery.com/jquery-latest.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.22/jquery-ui.min.js" type="text/javascript"></script>

<style>

  body {
    background:#abc939;
  }
  button {
    background-color:#4879ff;
    color:#fff;
    cursor:pointer;
  }
  #board {
    position:absolute;
    top:5px;
    left:200;
    width:617;
    height:617;
  }
  .numY {
    padding: 28 0 29 0px;
    color:#000;
    font-weight:bold;
  }
  .numX {
    float:left;
    padding: 0 34 0 35px;
    color:#000;
    font-weight:bold;
  }
  #stencilY {
    text-align:center;
    opacity:0.9;
    position:absolute;
    top:5px;
    left:197;
    width:15;
    height:620;
    font-weight:bold;
    cursor: e-resize;
  }
  #stencilX {
    text-align:left;
    opacity:0.9;
    padding-bottom: 3px;
    position:absolute;
    top:608px;
    left:197;
    height:18;
    width:620;
    font-weight:bold;
    cursor: n-resize;
  }
  #output{
    position:absolute;
    width:135;
    height:200;
    top:250px;
    left:30px;
    color:white;
    font-weight:bold;
    overflow:auto;
  }
  #score{
    position:absolute;
    width:135;
    height:40;
    top:500px;
    left:30px;
    color:white;
    font-weight:bold;
    text-align:center;
  }
  #bagBlack{
    position:absolute;
    top:5px;
    left:5px;
    width:190;
    height:250;
  }
  #bagWhite{
    position:absolute;
    top:361px;
    left:821px;
    width:190;
    height:250;
  }
  #cpuRef{
    position:absolute;
    top:670px;
    left:50px;
    text-align:left;
    color:white;
    font-weight:bold;
  }
  #cpu{
    position:absolute;
    top:565px;
    left:833px;
    width:130;
    text-align:center;
    color:white;
    font-weight:bold;
  }
  #progressbar {
    background:#5c1350;
    position:absolute;
    top:565px;
    left:823px;
    width:10px;
    height:50px;
    overflow:hidden;
  }

  #progressbar div {
    background:#abc939;
    width:100%;
    height:100%;
  }
  #nav{
    position:absolute;
    top:570px;
    left:35px;
    width:150;
    height:30;
    text-align:center;
  }
  #rotateBoard{
    position:absolute;
    top:5px;
    left:820px;
    width:150;
    height:60;
    text-align:center;
  }
  #gameNav button {
    width:100px;
    font-size:12px;
  }
  #outputTwo{
    position:absolute;
    width:120;
    top:185px;
    left:835px;
    color:white;
    font-weight:bold;
    text-align:center;
  }
  #tray1{
    position:absolute;
    width:77;
    height:77;
  }
  #tray2{
    position:absolute;
    width:77;
    height:77;
  }
  
</style>

</head>

<body>

<script>

'use strict';

/* Variables */
var moveHistory = [0],
historyString = '',
moveCount = 0, selectClick = 0, checkmateW = 0, checkmateB = 0,
checkWhite = [],
checkBlack = [],
castleCheckBlack = [],
castleCheckWhite = [],
checkHistory = [],
pieceTaken = false,
moveCountDisplay = 1,
displayNewMove = 1,
selectedHtml = 'undefined', selectedId = 'undefined', promoteTo = 'undefined',
moveType = '', selectedOriginalColor = '', bagString = '', selectedHistoryDiv = '',
castleHistory = [],
castleHistoryHistory = [],
enPassantHistory = [],
topLeftColor = 'white', // this configures starting top left color;
whosTurn = 1,
piecesHtml, piecesPGN,
boardPositionNames, boardPosition, boardHistory, boardIds,
rotation,
savedGame = [],
score

/* Pieces Html */
if (imagesOn)
{
  piecesHtml = ['',
    '<span style="cursor:pointer;position:absolute; left: 19%; bottom: 19%"><img src="images/1.png"></span>',
    '<span style="cursor:pointer;position:absolute; left: 19%; bottom: 19%"><img src="images/2.png"></span>',
    '<span style="cursor:pointer;position:absolute; left: 19%; bottom: 19%"><img src="images/3.png"></span>',
    '<span style="cursor:pointer;position:absolute; left: 19%; bottom: 19%"><img src="images/4.png"></span>',
    '<span style="cursor:pointer;position:absolute; left: 19%; bottom: 19%"><img src="images/5.png"></span>',
    '<span style="cursor:pointer;position:absolute; left: 19%; bottom: 19%"><img src="images/6.png"></span>']
  piecesHtml[-6] = '<span style="cursor:pointer;position:absolute; left: 19%; bottom: 19%"><img src="images/-6.png"></span>'
  piecesHtml[-5] = '<span style="cursor:pointer;position:absolute; left: 19%; bottom: 19%"><img src="images/-5.png"></span>'
  piecesHtml[-4] = '<span style="cursor:pointer;position:absolute; left: 20%; bottom: 20%"><img src="images/-4.png"></span>'
  piecesHtml[-3] = '<span style="cursor:pointer;position:absolute; left: 20%; bottom: 20%"><img src="images/-3.png"></span>'
  piecesHtml[-2] = '<span style="cursor:pointer;position:absolute; left: 20%; bottom: 20%"><img src="images/-2.png"></span>'
  piecesHtml[-1] = '<span style="cursor:pointer;position:absolute; left: 20%; bottom: 20%"><img src="images/-1.png"></span>'
}
else
{
  piecesHtml = ['',
    '<span style="cursor:pointer;color:white;font-size:60px;font-weight:bold">K</span>',
    '<span style="cursor:pointer;color:white;font-size:60px;font-weight:bold">Q</span>',
    '<span style="cursor:pointer;color:white;font-size:60px;font-weight:bold">R</span>',
    '<span style="cursor:pointer;color:white;font-size:60px;font-weight:bold">B</span>',
    '<span style="cursor:pointer;color:white;font-size:60px;font-weight:bold">N</span>',
    '<span style="cursor:pointer;color:white;font-size:50px;font-weight:bold">p</span>']
  piecesHtml[-6] = '<span style="cursor:pointer;color:black;font-size:50px;font-weight:bold">p</span>'
  piecesHtml[-5] = '<span style="cursor:pointer;color:black;font-size:60px;font-weight:bold">N</span>'
  piecesHtml[-4] = '<span style="cursor:pointer;color:black;font-size:60px;font-weight:bold">B</span>'
  piecesHtml[-3] = '<span style="cursor:pointer;color:black;font-size:60px;font-weight:bold">R</span>'
  piecesHtml[-2] = '<span style="cursor:pointer;color:black;font-size:60px;font-weight:bold">Q</span>'
  piecesHtml[-1] = '<span style="cursor:pointer;color:black;font-size:60px;font-weight:bold">K</span>'
}

piecesPGN = ['', 'K', 'Q', 'R', 'B', 'N', '']
piecesPGN[-6] = ''
piecesPGN[-5] = 'N'
piecesPGN[-4] = 'B'
piecesPGN[-3] = 'R'
piecesPGN[-2] = 'Q'
piecesPGN[-1] = 'K'

/* Board Positions */
boardPositionNames = [
'a8','b8','c8','d8','e8','f8','g8','h8',
'a7','b7','c7','d7','e7','f7','g7','h7',
'a6','b6','c6','d6','e6','f6','g6','h6',
'a5','b5','c5','d5','e5','f5','g5','h5',
'a4','b4','c4','d4','e4','f4','g4','h4',
'a3','b3','c3','d3','e3','f3','g3','h3',
'a2','b2','c2','d2','e2','f2','g2','h2',
'a1','b1','c1','d1','e1','f1','g1','h1']

boardPosition = [
  -3,-5,-4,-2,-1,-4,-5,-3,
  -6,-6,-6,-6,-6,-6,-6,-6,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0,
  6, 6, 6, 6, 6, 6, 6, 6,
  3, 5, 4, 2, 1, 4, 5, 3, [], []]
  
boardPosition[-1] = 0

boardHistory = [boardPosition.slice(0,64)]
boardHistory[0][64] = boardPosition[64].slice(0)
boardHistory[0][65] = boardPosition[65].slice(0)

/* Enable board transformations*/
boardIds = [
  [0,1,2,3,4,5,6,7],
  [8,9,10,11,12,13,14,15],
  [16,17,18,19,20,21,22,23],
  [24,25,26,27,28,29,30,31],
  [32,33,34,35,36,37,38,39],
  [40,41,42,43,44,45,46,47],
  [48,49,50,51,52,53,54,55],
  [56,57,58,59,60,61,62,63]]

function renderBoard(topLeft)
{
  var boardString='', Id=0, topRight, z
  
  if (topLeft == 'black')
  {
    topRight = colorWhite
    topLeft = colorBlack
  }
  
  if (topLeft == 'white')
  {
    topRight = colorBlack
    topLeft = colorWhite
  }
  
  
  for (var y=0; y<8; y++)
  {  
    for(var x=0; x<8; x++)
    {
      boardString += '<div id="'+ boardIds[y][x] +'" style="position:relative;float:left;width:77;height:77;text-align:center;background-color:'
      
      if (x%2 != 0) boardString += topRight
      else boardString += topLeft
      boardString += ';'
      
      boardString +='" onClick="doClick();doSelect('+boardIds[y][x]+');"></div>'
    }
    z = topLeft
    topLeft = topRight
    topRight = z
  }
  
  document.getElementById('board').innerHTML = boardString
}

function plotBoard(moveNumber)
{  
  for (var a=0;a<64;a++){
  
    document.getElementById(a).innerHTML = piecesHtml[boardHistory[moveNumber][a]]
  }
  
  /* plot pieces taken*/  
  if (boardHistory[moveNumber][64] || boardHistory[moveNumber][65])
  {
    var stringBagWhite = '', stringBagBlack = '', stringTmp
        
    for (var a=0;a<boardHistory[moveNumber][64].length;a++)
    {
      stringTmp = '<img src="images/' + boardHistory[moveNumber][64][a] + '.png">' 
    
      stringBagWhite += '<div style="float:left;">' + stringTmp + '</div>'
    }
    for (var a=0;a<boardHistory[moveNumber][65].length;a++)
    {
        stringTmp = '<img src="images/' + boardHistory[moveNumber][65][a] + '.png">' 
    
        stringBagBlack += '<div style="float:left;">' + stringTmp + '</div>'  
    }
    
    document.getElementById('bagWhite').innerHTML = stringBagWhite
    document.getElementById('bagBlack').innerHTML = stringBagBlack
  }
}

/* Transform board */
rotation = 0
function transformBoard(direction)
{
  var boardIdsTmp = [
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    []]

  for (var y=0; y<8; y++)
  {
    for(var x=0; x<8; x++)
    {
      boardIdsTmp[y][x] = boardIds[y][x]
    }
  }
  
  for (var y=0; y<8; y++)
  {
    for(var x=0; x<8; x++)
    {
      if (direction == 'CC') boardIds[7-x][y] = boardIdsTmp[y][x]
      if (direction == 'CL') boardIds[y][x] = boardIdsTmp[7-x][y]
    }
  }
  
  switch (topLeftColor == 'black')
  {
  case true:
    topLeftColor = 'white'
    break;
  case false:
    topLeftColor = 'black'
    break;
  }
  
  renderBoard(topLeftColor)
  plotBoard(moveCount)
  
  if (direction == 'CC') rotation--
  if (direction == 'CL') rotation++
  if (Math.abs(rotation) == 4) rotation = 0
  
  if (Math.abs(rotation) == 2)
  {
    document.getElementById('bagWhite').style.top = 5
    document.getElementById('bagWhite').style.left = 5
    document.getElementById('bagBlack').style.top = 361
    document.getElementById('bagBlack').style.left = 821
  }
  if (rotation == 0)
  {
    document.getElementById('bagWhite').style.top = 361
    document.getElementById('bagWhite').style.left = 821
    document.getElementById('bagBlack').style.top = 5
    document.getElementById('bagBlack').style.left = 5
  }
  
  if (selectClick == 2) document.getElementById(selectedId).style.backgroundColor = '#a5376d'
  
  /* Transform number stencils*/
  var letters = [0,'a','b','c','d','e','f','g','h']
  
  if (rotation == -1 || rotation == 3)
  {
    for (var a=1; a<=8; a++)
    {
      document.getElementById('x'+a).innerHTML = a
      document.getElementById('y'+a).innerHTML = letters[a]
    }
  }
  
  if (rotation == 1)
  {
    for (var a=1; a<=8; a++)
    {
      document.getElementById('x'+a).innerHTML = a
      document.getElementById('y'+a).innerHTML = letters[9-a]
    }
  }
  
  if (Math.abs(rotation) == 2)
  {
    for (var a=1; a<=8; a++)
    {
      document.getElementById('y'+a).innerHTML = 9-a
      document.getElementById('x'+a).innerHTML = letters[9-a]
    }
  }
  
  if (rotation == 0)
  {
    for (var a=1; a<=8; a++)
    {
      document.getElementById('x'+a).innerHTML = letters[a]
      document.getElementById('y'+a).innerHTML = a
    }
  }
  
}

function doClick()
{
  if (selectedHtml == 'undefined') selectClick = 1
  if (selectedHtml != 'undefined') selectClick = 2
}

function doSelect(x)
{
  if (selectedHtml == 'undefined' && selectClick == 1)
  {
    if (document.getElementById(x).id) selectedId = parseInt( document.getElementById(x).id )
    
    if (document.getElementById(x).innerHTML != '' && (boardPosition[selectedId] > 0 ? 1 : 0) == whosTurn)
    {
      selectedHtml = document.getElementById(x).innerHTML
      selectedOriginalColor = document.getElementById(x).style.backgroundColor
      document.getElementById(x).style.backgroundColor = '#a5376d'
    }
  }
  if (selectedHtml != 'undefined' && selectClick == 2)
  {
    var toId = parseInt( document.getElementById(x).id )
    
    if (toId == selectedId)
    {
      document.getElementById(selectedId).style.backgroundColor = selectedOriginalColor
      selectedOriginalColor = ''
      selectedId = selectedHtml = 'undefined'
      pieceTaken = false
      selectClick = 1
    }
    
    if (boardPosition[toId] * boardPosition[selectedId] > 0)
    {
      document.getElementById(selectedId).style.backgroundColor = selectedOriginalColor
      selectedId = toId
      selectedOriginalColor = document.getElementById(selectedId).style.backgroundColor
      selectedHtml = document.getElementById(selectedId).innerHTML
      document.getElementById(selectedId).style.backgroundColor = '#a5376d'
      pieceTaken = false
      selectClick = 2
    }
    
    if (boardPosition[selectedId] && (boardPosition[toId] * boardPosition[selectedId]) <= 0 && rules(selectedId, toId) )
    {
      if (document.getElementById('animate').checked == true )
      {
        animation = 1
        animation_speed = document.getElementById('animate_speed').value*1000
      }
      else animation = 0
    
      /* Unset castle and en passant histories*/
      for (var a=moveCount+1; a<=boardHistory.length; a++)
      {
        if (castleHistory[a]) castleHistory[a] = undefined
        if (enPassantHistory[a]) enPassantHistory[a] = undefined
      }
      
      var rule = doRule(selectedId,toId)
      
      if (rule == 'queenside' || rule == 'kingside')
      {
        if (rule == 'queenside') moveType = 'queenside'
        if (rule == 'kingside') moveType = 'kingside'
        
        switch(toId)
        {
        case 6:
          if (animation) animateMove(7,5,animation_speed,'tray2')
          else
          {
            document.getElementById(5).innerHTML = document.getElementById(7).innerHTML
            document.getElementById(7).innerHTML = ''
            document.getSelection().removeAllRanges();
          }
          break
        case 2:
          if (animation) animateMove(0,3,animation_speed,'tray2')
          else
          {
            document.getElementById(3).innerHTML = document.getElementById(0).innerHTML
            document.getElementById(0).innerHTML = ''
            document.getSelection().removeAllRanges();
          }
          break
        case 62:
          if (animation) animateMove(63,61,animation_speed,'tray2')
          else
          {
            document.getElementById(61).innerHTML = document.getElementById(63).innerHTML
            document.getElementById(63).innerHTML = ''
            document.getSelection().removeAllRanges();
          }
          break
        case 58:
          if (animation) animateMove(59,56,animation_speed,'tray2')
          else
          {
            document.getElementById(59).innerHTML = document.getElementById(56).innerHTML
            document.getElementById(56).innerHTML = ''
            document.getSelection().removeAllRanges();
          }
          break
        }
      }
      
      if (rule == 'enPassant')
      {
        moveType = 'enPassant'
        var imgName
        
        if (boardPosition[selectedId] > 0)
        {
          imgName = boardPosition[toId+8]
          if (animation) setTimeout( function(){
            document.getElementById(toId+8).innerHTML = ''}, animation_speed)
          else document.getElementById(toId+8).innerHTML = ''
        }
        if (boardPosition[selectedId] < 0)
        {
          imgName = boardPosition[toId-8]
          if (animation) setTimeout( function(){
            document.getElementById(toId-8).innerHTML = ''}, animation_speed)
          else document.getElementById(toId-8).innerHTML = ''
        }
        
        bagString = '<img src="images/' + imgName + '.png">' 
        
        if (animation)
        {
          if (boardPosition[selectedId] < 0) setTimeout( function(){
            document.getElementById('bagBlack').innerHTML += '<div style="float:left;">' + bagString + '</div>'}, delay_bagstring)
          if (boardPosition[selectedId] > 0) setTimeout( function(){
            document.getElementById('bagWhite').innerHTML += '<div style="float:left;">' + bagString + '</div>'}, delay_bagstring)
        }
        else
        {
          if (boardPosition[selectedId] < 0) document.getElementById('bagBlack').innerHTML += '<div style="float:left;">' + bagString + '</div>'
          if (boardPosition[selectedId] > 0) document.getElementById('bagWhite').innerHTML += '<div style="float:left;">' + bagString + '</div>'
        }
      }
      
      if (boardPosition[toId] != 0)
      {  
        pieceTaken = true;
        var imgName = boardPosition[toId]
        bagString = '<img src="images/' + imgName + '.png">'
        
        if (animation)
        {
          if (boardPosition[selectedId] < 0) setTimeout( function(){
            document.getElementById('bagBlack').innerHTML += '<div style="float:left;">' + bagString + '</div>'}, animation_speed+100)
          if (boardPosition[selectedId] > 0) setTimeout( function(){
            document.getElementById('bagWhite').innerHTML += '<div style="float:left;">' + bagString + '</div>'}, animation_speed+100)
        }
        else
        {
          if (boardPosition[selectedId] < 0) document.getElementById('bagBlack').innerHTML += '<div style="float:left;">' + bagString + '</div>'
          if (boardPosition[selectedId] > 0) document.getElementById('bagWhite').innerHTML += '<div style="float:left;">' + bagString + '</div>'
        }
      }
      
      if (selectedHtml != '')
      {
        if (rule != 'promote')
        {
          //animate move
          if (animation) animateMove(selectedId, toId, animation_speed,'tray1')
          else
          {
            document.getElementById(x).innerHTML = selectedHtml
            document.getElementById(selectedId).innerHTML = ''
            document.getSelection().removeAllRanges();
          }
        }
        else
        {
          /* Promote Pawn */
          moveType = 'promote'
          if (boardPosition[selectedId] > 0) promoteTo = document.getElementById('promoteTo').value
          if (boardPosition[selectedId] < 0) promoteTo = -document.getElementById('promoteTo').value
          
          if (animation) animateMove(selectedId, toId, animation_speed,'tray1',promoteTo)
          else
          {
            document.getElementById(x).innerHTML = piecesHtml[promoteTo]
            document.getElementById(selectedId).innerHTML = ''
            document.getSelection().removeAllRanges();
          }
        }
          
        document.getElementById(selectedId).style.backgroundColor = selectedOriginalColor
      }
      
      
      moveCount++
      doLog(selectedId,toId,pieceTaken,moveType)
      
      if(moveCount%2 == 0) displayNewMove = 0
      if(moveCount%2 != 0) displayNewMove = 1
      
      if (displayNewMove) document.getElementById('output').innerHTML += '<div id="move'+moveCount+'" style="float:left;clear:left">' + moveCountDisplay + '. ' + moveHistory[moveCount] + '&nbsp&nbsp</div>'
      if (!displayNewMove) document.getElementById('output').innerHTML += '<div id="move'+moveCount+'" style="float:left">' + moveHistory[moveCount] + '</div>'
      document.getElementById('output').scrollTop = document.getElementById('output').scrollHeight
      
      switch(whosTurn)
      {  
      case 1:
        whosTurn = 0
        break
      case 0:
        moveCountDisplay++
        whosTurn = 1
        break
      }
      
      selectedHtml = selectedId = promoteTo = 'undefined'
      pieceTaken = false
      moveType = ''
      selectClick = 0
      
      if ( document.getElementById('cpuOn').value != 0 ) 
      {
        var depth = document.getElementById("cpuDepth").value
      
        if ( depth == 'auto' )
        {
          var x = countPieces()
    
          if ( x > 20 ) depth = 2
          if ( x < 21 && x > 12 ) depth = 3
          if ( x < 13 && x > 6 ) depth = 4
          if ( x < 7 ) depth = 5
        }
        
        else depth = document.getElementById("cpuDepth").value
        
        switch( document.getElementById('cpuOn').value )
        {
          case 'white':
            var endgame = ( countPieces('b') < 6 ? 1 : 0 )
            if ( endgame ) depth--
            if ( whosTurn && !checkmateW ) cpu( 1, depth, endgame )
            break
          case 'black':
            var endgame = ( countPieces('w') < 6 ? 1 : 0 )
            if ( endgame ) depth--
            if ( !whosTurn && !checkmateB ) cpu( 0, depth, endgame )
            break
        }
      }
    }
  }
}

function doLog(fromId, toId, pieceTaken, moveType)
{
  if (moveType == 'kingside')
  {
    historyString = '0-0'
    if (boardPosition[fromId] == -1) 
    {
      boardPosition[5] = boardPosition[7]
      boardPosition[7] = 0
    }
    if (boardPosition[fromId] == 1) 
    {
      boardPosition[61] = boardPosition[63]
      boardPosition[63] = 0
    }
  }
  if (moveType == 'queenside')
  {
    historyString = '0-0-0'
    if (boardPosition[fromId] == -1) 
    {
      boardPosition[3] = boardPosition[0]
      boardPosition[0] = 0
    }
    if (boardPosition[fromId] == 1) 
    {
      boardPosition[59] = boardPosition[56]
      boardPosition[56] = 0
    }
  }
  
  var pieceToBag, takingPieceDisplay
  
  if (pieceTaken)
  {
    pieceToBag = boardPosition[toId]
    if (piecesPGN[boardPosition[fromId]] == '') takingPieceDisplay = boardPositionNames[fromId].substr(0,1)
    else
    {
      /* display board position for moves with alternates */
      if ( displayPosition(fromId, toId) )
      {
        takingPieceDisplay = piecesPGN[boardPosition[fromId]]
        switch( displayPosition(fromId, toId)[1] )
        {
          case 'sameFile':
            takingPieceDisplay += boardPositionNames[ fromId ].substr(1,1)
            break
          case 'sameRank':
            takingPieceDisplay += boardPositionNames[ fromId ].substr(0,1)
            break
          case 'sameFileAndRank':
            takingPieceDisplay += boardPositionNames[ fromId ]
            break
          case 'differentFileAndRank':
            takingPieceDisplay += boardPositionNames[ fromId ].substr(0,1)
            break
        }
      }
      else takingPieceDisplay = piecesPGN[boardPosition[fromId]]
    }
    historyString = takingPieceDisplay + 'x' + boardPositionNames[toId]
  }
  if (moveType == 'enPassant')
  {
    var pieceToBagPosition
    
    if (boardPosition[fromId] > 0)
    {  
      pieceToBagPosition = toId+8
      pieceToBag = boardPosition[pieceToBagPosition]
    }
    if (boardPosition[fromId] < 0)
    {
      pieceToBagPosition = toId-8
      pieceToBag = boardPosition[pieceToBagPosition]
    }
    
    boardPosition[pieceToBagPosition] = 0
    historyString = boardPositionNames[fromId].substr(0,1) + 'x' + boardPositionNames[toId] + '(ep)'
  }
  
  if (!pieceTaken && moveType != 'kingside' && moveType != 'queenside' && moveType != 'enPassant') 
  {
    /* display board position for moves with alternates */ 
    if ( displayPosition(fromId, toId) )
    {
      historyString = piecesPGN[boardPosition[fromId]]
      switch( displayPosition(fromId, toId)[1] )
      {
        case 'sameFile':
          historyString += boardPositionNames[ fromId ].substr(1,1)
          break
        case 'sameRank':
          historyString += boardPositionNames[ fromId ].substr(0,1)
          break
        case 'sameFileAndRank':
          historyString += boardPositionNames[ fromId ]
          break
        case 'differentFileAndRank':
          historyString += boardPositionNames[ fromId ].substr(0,1)
          break
      }
      historyString += boardPositionNames[toId]
    }
    else historyString = piecesPGN[boardPosition[fromId]] + boardPositionNames[toId]
  }
  
  var promoteString = ''
  if (moveType == 'promote') 
  {
    historyString += '=' + piecesPGN[promoteTo]
    promoteString = '-' + document.getElementById('promoteTo').value
  }
  
  /* Castle History*/
  switch( boardPosition[fromId] )
  {
    case 1:
    case -1:
    case 3:
    case -3:
      if ( castleHistory.indexOf( fromId ) == -1 ) castleHistory[moveCount] = fromId
      break
  }
  /* En Passant History - Black Pawns */
  if ( (7 < fromId && fromId < 16) && (23 < toId && toId < 32) && boardPosition[fromId] == -6) enPassantHistory[moveCount] = fromId
  
  /* En Passant History - White Pawns */
  if ( (47 < fromId && fromId < 56) && (31 < toId && toId < 40) && boardPosition[fromId] == 6) enPassantHistory[moveCount] = fromId
  
  //update binary engine
  upBin(fromId, toId, pieceToBag, moveType)
  
  
  boardPosition[toId] = boardPosition[fromId]
  boardPosition[fromId] = 0
  
  if (moveType == 'promote') boardPosition[toId] = promoteTo
  
  if (pieceTaken)
  {  
    if (boardPosition[toId] > 0) boardPosition[64].push(pieceToBag)
    if (boardPosition[toId] < 0) boardPosition[65].push(pieceToBag)
  }
  if (moveType == 'enPassant')
  {  
    if (pieceToBag > 0) boardPosition[64].push(pieceToBag)
    if (pieceToBag < 0) boardPosition[65].push(pieceToBag)
  }
  
  boardHistory[moveCount] = boardPosition.slice(0,64)
  boardHistory[moveCount][64] = boardPosition[64].slice(0)
  boardHistory[moveCount][65] = boardPosition[65].slice(0)

  score = az()
  document.getElementById('score').innerHTML = 'White: ' + ( score[0]/1000 ) + '<br />Black: ' + ( score[1]/1000 )
  
  if (checkWhite.length > 0 || checkBlack.length > 0) historyString += '+'
  if (checkmateW || checkmateB) historyString += '+'
  
  moveHistory[moveCount] = historyString
  savedGame[moveCount] = fromId + '-' + toId + promoteString
  
  /* Unset history higher than current move */
  moveHistory[moveCount+1] = undefined
  boardHistory[moveCount+1] = undefined
  
  if (selectedHistoryDiv && document.getElementById(selectedHistoryDiv)) document.getElementById(selectedHistoryDiv).style.backgroundColor = ''
  for (var a=moveCount;a<moveHistory.length;a++)
  {
    if (document.getElementById('move'+a))
    {
      var child = document.getElementById('move'+a)
      document.getElementById('output').removeChild(child)
    }
  }
}

/* Display position for moves with alternates*/
function displayPosition(displayFrom, displayTo)
{
  displayFrom=parseInt(displayFrom)
  displayTo=parseInt(displayTo)
  var alternates = [], sameFile = [], sameRank = [], moves
  
  switch (whosTurn)
  {
    case 1:
      moves = score[2]
      break
    case 0:
      moves = score[3]
      break
  }
  
  for (var a in moves)
  {
    if ( (boardPosition[a] * boardPosition[displayFrom]) > 0 && Math.abs( boardPosition[a] ) == Math.abs( boardPosition[displayFrom] ) )
    {
      if (moves[a].indexOf (displayTo) != -1 && a != displayFrom) 
      {
        alternates.push(a)
        if ( boardPositionNames[displayFrom].substr(0,1) == boardPositionNames[a].substr(0,1) ) sameFile.push(a)
        if ( boardPositionNames[displayFrom].substr(1,1) == boardPositionNames[a].substr(1,1) ) sameRank.push(a)
      }
    }    
  }
  if ( Math.abs( boardPosition[ displayFrom ] ) == 6) return false
  else if (alternates.length > 0) 
  {
    if (sameFile.length > 0 && sameRank.length == 0) return [true, 'sameFile']
    else if (sameRank.length > 0 && sameFile.length == 0) return [true, 'sameRank']
    else if (sameFile.length > 0 && sameRank.length > 0) return [true, 'sameFileAndRank']
    else if (sameFile.length == 0 && sameRank.length == 0) return [true, 'differentFileAndRank']
  }
  else return false
}

/* Display PGN */
function pgn()
{
  var PGN = '', move
  
  for (var a=1; a<=moveCount; a++)
  {
    if (moveHistory[a] == '0-0') move = 'O-O'
    else if (moveHistory[a] == '0-0-0') move = 'O-O-O'
    else move = moveHistory[a]
    
    if (a == 1) PGN += '1. ' + move + ' '
    else if (a%2 == 0) PGN += move + ' '
    else PGN += (a+1)/2 + '. ' + move + ' '
  }
  
  alert(PGN)
}


/* Save Game */
function saveGame()
{
  var c = confirm('Save game in current position?')
  if (c == true)
  {
    var whiteValue
    if( document.getElementById('player1').checked) whiteValue = document.getElementById('player1').value
    if( document.getElementById('player2').checked) whiteValue = document.getElementById('player2').value
    
    var savedGameSlice = savedGame.slice(0, moveCount+1)
    var savedGameString = savedGameSlice.join( ';' )
    savedGameString = 'white-' + whiteValue + savedGameString
    
    $.post( 'server.php', { saveGame: true, savedGame: savedGameString, moveCount: moveCount, white: whiteValue } );
    
    var c = confirm( 'Game saved to server.\nWould you like to keep a copy?')
    if (c == true)
    {  
      
      var content = '<p>Please copy text in the box below and save as a text file.</p>'
      content += '<p>Enjoy!</p>' 
      content += '<textarea rows="3" cols="25" readonly="readonly">' + savedGameString + '</textarea><br />'
      content += '<p style="float:right; margin-right:40px;"><a href="#" onClick="window.close()">Close</a></p>'
    
      top.consoleRef=window.open('','myconsole',
        'width=350,height=250'
        +',menubar=0'
        +',toolbar=1'
        +',status=0'
        +',scrollbars=1'
        +',resizable=1')
      var docRef = top.consoleRef.document.open("text/html","replace");
      top.consoleRef.document.writeln(
      '<html><head><title>Save Game</title></head>'
      +'<body bgcolor=white onLoad="self.focus()">'
      +content
      +'</body></html>'
      )
      top.consoleRef.document.close()
    }
  }
  else return false
}

function manualLoad()
{
  var c=confirm('Are you sure you want to load a new game?')
  if(c == true) loadGame()
  else return false
}

function loadGame()
{
  var content = '<p>Please paste game text in the box below and press "Go". </p>'
  content += '<p>Enjoy!</p>' 
  content += '<textarea id="gameText" rows="3" cols="5"></textarea><br />'
  content += '<p><button type="button" onClick="doLoad();">Go</button></p>'
  
  document.getElementById('output').scrollTop = 0
  document.getElementById( 'output' ).innerHTML = content
}

function resetGame()
{
  document.getElementById( 'output' ).innerHTML = ''
  document.getElementById('promoteTo').value = 2
  document.getElementById('cpuOn').value = 0
  document.getElementById('cpuDepth').value = 'auto'
  moveHistory = [0]
  historyString = ''
  moveCount = selectClick = checkmateW = checkmateB = 0
  checkWhite = [0]
  checkBlack = [0]
  checkHistory = []
  pieceTaken = false
  moveCountDisplay = 1
  displayNewMove = 1
  selectedHtml = selectedId = promoteTo = 'undefined'
  moveType = selectedOriginalColor = bagString = selectedHistoryDiv = ''
  castleHistory = []
  enPassantHistory = []
  topLeftColor = 'white' // this configures starting top left color;
  whosTurn = 1
  savedGame = []
  
  boardPosition = boardHistory[0].slice(0,64)
  loadBoard(boardPosition)//update binary
  boardPosition[64] = boardHistory[0][64].slice(0)
  boardPosition[65] = boardHistory[0][65].slice(0)
  
  renderBoard(topLeftColor)
  plotBoard(0)
}

function doLoad()
{
  document.getElementById('animate').checked=''
  setTimeout(function(){document.getElementById('animate').checked = true},3000)
  var savedGameString = String (document.getElementById( 'gameText' ).value)
  resetGame()
  
  var loadedGame = savedGameString.split( ';' ),
    loadedMoves = []
    
  for (var a=0; a < loadedGame.length; a++)
  {
    loadedMoves.push ( loadedGame[a].split( '-' ) )
  }
  
  if (loadedMoves[0][1] == "S") document.getElementById('player1').checked = 'checked'
  if (loadedMoves[0][1] == "G") document.getElementById('player2').checked = 'checked'
  
  for (var loadGameA=1; loadGameA < loadedMoves.length; loadGameA++)
  {
    for (var loadGameB=0;loadGameB < 2; loadGameB++)
    {
      if (loadedMoves[loadGameA].length == 3) document.getElementById('promoteTo').value = parseInt(loadedMoves[loadGameA][2])
      doClick()
      if (String( loadedMoves[loadGameA][loadGameB] ) == 'resign') resignGame()
      else doSelect(parseInt( loadedMoves[loadGameA][loadGameB] ))
    }
  }
}

function doBack()
{  
  if (moveCount >= 1)
  {
    if (selectClick == 2) document.getElementById(selectedId).style.backgroundColor = selectedOriginalColor
    
    if(selectedHistoryDiv && document.getElementById(selectedHistoryDiv))document.getElementById(selectedHistoryDiv).style.backgroundColor = ''
    selectedHistoryDiv = 'move'+(moveCount-1);    
    if (document.getElementById(selectedHistoryDiv)) document.getElementById('move'+(moveCount-1)).style.backgroundColor = '#354871'
    
    plotBoard(moveCount-1)
    
    switch(whosTurn == 1)
    {  
    case true:
      whosTurn = 0
      break
    case false:
      moveCountDisplay++
      whosTurn = 1
      break
    }
      
    boardPosition = boardHistory[moveCount-1].slice(0,64)
    loadBoard(boardPosition)//update binary
    boardPosition[64] = boardHistory[moveCount-1][64].slice(0)
    boardPosition[65] = boardHistory[moveCount-1][65].slice(0)
    castleHistoryHistory[moveCount] = castleHistory.splice( moveCount, 1 )
    score = az()
    document.getElementById('score').innerHTML = 'White: ' + ( score[0]/1000 ) + '<br />Black: ' + ( score[1]/1000 )
    moveCount--
    moveCountDisplay--
    selectedHtml = selectedId = promoteTo = 'undefined'
    pieceTaken = false
    moveType = ''
    selectClick = 0
  }
}

function doForward()
{
  if (boardHistory[moveCount+1] != undefined && moveHistory[moveCount+1] != undefined)
  {
  
    if (selectClick == 2) document.getElementById(selectedId).style.backgroundColor = selectedOriginalColor
      
    if (document.getElementById(selectedHistoryDiv)) document.getElementById(selectedHistoryDiv).style.backgroundColor = ''
    selectedHistoryDiv = 'move'+(moveCount+1)
    if (document.getElementById(selectedHistoryDiv)) document.getElementById('move'+(moveCount+1)).style.backgroundColor = '#354871'
    
    plotBoard(moveCount+1)
    
    switch(whosTurn == 1)
    {  
    case true:
      whosTurn = 0
      break
    case false:
      moveCountDisplay++
      whosTurn = 1
      break
    }
    
    boardPosition = boardHistory[moveCount+1].slice(0,64)
    loadBoard(boardPosition) //update binary
    boardPosition[64] = boardHistory[moveCount+1][64].slice(0)
    boardPosition[65] = boardHistory[moveCount+1][65].slice(0)
    castleHistory[moveCount+1] = castleHistoryHistory.splice( moveCount+1, 1 )
    score = az()
    document.getElementById('score').innerHTML = 'White: ' + ( score[0]/1000 ) + '<br />Black: ' + ( score[1]/1000 )
    moveCount++
    moveCountDisplay++
    selectedHtml = selectedId = promoteTo = 'undefined'
    pieceTaken = false
    moveType = ''
    selectClick = 0
  }
}

function showNewGame()
{
  $('#saveGame').hide()
  $('#loadGame').hide()
  $('#newGame').hide()
  $('#setPlayers').show()
}

function hideNewGame()
{
  $('#setPlayers').hide()
  $('#saveGame').show()
  $('#loadGame').show()
  $('#newGame').show()
}

function newGame()
{
  var c = confirm('Really start a new game?')
  if (c == true) 
  {
    resetGame()
    hideNewGame()
  }
  else
  {
    hideNewGame()
    return false
  }
}

/* CHESS RULES */
function doRule(fromId, toId)
{
  /* Castle */
  if ( boardPosition[fromId] == -1 && castleHistory.indexOf(4) == -1 && checkBlack.length == 0 )
  {
    if ( toId == 6 && !boardPosition[5] && !boardPosition[6] && castleHistory.indexOf(7) == -1 && castleCheckBlack.indexOf('kingside') == -1) return 'kingside'
    if ( toId == 2 && !boardPosition[1] && !boardPosition[2] && !boardPosition[3] && castleHistory.indexOf(0) == -1 && castleCheckBlack.indexOf('queenside') == -1) return 'queenside'
  }
  if ( boardPosition[fromId] == 1  && castleHistory.indexOf(60) == -1 && checkWhite.length == 0 )
  {
    if ( toId == 62 && !boardPosition[61] && !boardPosition[62] && castleHistory.indexOf(63) == -1 && castleCheckWhite.indexOf('kingside') == -1) return 'kingside'
    if ( toId == 58 && !boardPosition[57] && !boardPosition[58] && !boardPosition[59] && castleHistory.indexOf(56) == -1 && castleCheckWhite.indexOf('queenside') == -1) return 'queenside'
  }
  
  /* En Passant White on Black */
  var wPawnsInitialPos = [48,49,50,51,52,53,54,55], //initial positions
  bPawnsInitialPos = [15,14,13,12,11,10,9,8]//
  
  for (var a=16;a<24;a++)
  {
    for (var b=0;b<8;b++)
    {
      if (toId == a && (a-8) == bPawnsInitialPos[b] && enPassantHistory[moveCount] == bPawnsInitialPos[b] && boardPosition[fromId] == 6)
      {
        return 'enPassant'
      }
    }
  }
  /* En Passant Black on White */
  for (var a=40;a<48;a++)
  {
    for (var b=0;b<8;b++)
    {
      if (toId == a && (a+8) == wPawnsInitialPos[b] && enPassantHistory[moveCount] == wPawnsInitialPos[b] && boardPosition[fromId] == -6)
      {
        return 'enPassant'
      }
    }
  }
  
  /* Promote white pawn */
  if (boardPosition[fromId] == 6 && toId < 8 ) return 'promote'

  /* Promote black pawn */
  if (boardPosition[fromId] == -6 && toId > 55 ) return 'promote'
}

function rules(fromId, toId)
{
  fromId = Number(fromId)
  toId = Number(toId)
  
  if(document.getElementById('rules').checked)
  {
    switch (whosTurn)
    {
      case 1:
        var availableMoves = score[2]
        if (availableMoves[fromId] && availableMoves[fromId].length > 0 && availableMoves[fromId].indexOf(toId) != -1) return true
        else return false
        break
      case 0:
        var availableMoves = score[3]
        if (availableMoves[fromId] && availableMoves[fromId].length > 0 && availableMoves[fromId].indexOf(toId) != -1) return true
        else return false
        break
    }
  }
  else return true
}

function confirmResign()
{
  var c = confirm('Are you sure you want to resign the game?')
  
  if (c) resignGame()
  else return false
}

function resignGame()
{
  switch (whosTurn)
  {
    case 1:
      moveCount++
      moveHistory[moveCount] = '0-1'
      boardHistory[moveCount] = boardHistory[moveCount-1].slice(0)
      if (document.getElementById(selectedHistoryDiv)) document.getElementById(selectedHistoryDiv).style.backgroundColor = ''
      for (var a=moveCount;a<moveHistory.length;a++)
      {
        if (document.getElementById('move'+a))
        {
          var child = document.getElementById('move'+a)
          document.getElementById('output').removeChild(child)
        }
      }
      document.getElementById('output').innerHTML += '<div id="move'+(moveCount)+'" style="float:left;clear:left">' + (moveCountDisplay+1) + '. 0-1&nbsp&nbsp</div>'
      savedGame[moveCount] = 'resign'
      whosTurn = 0
      break
    case 0:
      moveCount++
      boardHistory[moveCount] = boardHistory[moveCount-1].slice(0)
      moveHistory[moveCount] = '1-0'
      if (document.getElementById(selectedHistoryDiv)) document.getElementById(selectedHistoryDiv).style.backgroundColor = ''
      for (var a=moveCount;a<moveHistory.length;a++)
      {
        if (document.getElementById('move'+a))
        {
          var child = document.getElementById('move'+a)
          document.getElementById('output').removeChild(child)
        }
      }
      document.getElementById('output').innerHTML += '<div id="move'+moveCount+'" style="float:left">1-0</div>'
      savedGame[moveCount] = 'resign'
      whosTurn = 1
      break
  }
}

function showCpu()
{
  var l = document.getElementById('cpu')
  
  switch (l.style.visibility)
  {
    case 'hidden':
      l.style.visibility = 'visible'
      break
    case 'visible':
      l.style.visibility = 'hidden'
    break
  }
}

function cpu( side,depth, eg ) // eg means end game
{
  //random opening
  if ( ( moveCount == 0 && whosTurn ) || ( moveCount == 1 && !whosTurn ) )
  {  
    var sec = ( new Date().getTime()/1000 ).toString(),
      openingW = [ "e2e4", "d2d4", "g1f3", "b1c3", "c2c4", "g2g3", "e2e4", "c2c3", "e2e4", "d2d4" ],
      openingB = [ "e7e5", "d7d5", "g8f6", "b8c6", "c7c5", "g7g6", "c7c5", "c7c6", "e7e6", "g7g6" ],
      l = ( sec.charCodeAt(sec.length-1) - ('0').charCodeAt(0)),
      move = whosTurn ? openingW[l] : openingB[l]
    
    setTimeout(function(){
      doClick()
      doSelect( boardPositionNames.indexOf( move.substr(0,2) ) )
      doClick()
      doSelect( boardPositionNames.indexOf( move.substr(2,2) ) )
    }, animation_speed+animation_speed/2)
  }
  else
  {
    document.getElementById('processing').innerHTML = '<img src="images/processing.gif">'
    document.getElementById('cpuRef').innerHTML = '<div id="cpu0" style="float:left;">'

    var worker = new Worker('cpu.js'),
      move, total
    
    worker.postMessage({ 'boardPosition': JSON.stringify(boardPosition), 'WB': JSON.stringify(WB), 'WB90': JSON.stringify(WB90),
          'WB45cl': JSON.stringify(WB45cl), 'WB45cc': JSON.stringify(WB45cc), 'P': JSON.stringify(P),
          'BB': JSON.stringify(BB), 'BB90': JSON.stringify(BB90), 'BB45cl': JSON.stringify(BB45cl), 
          'BB45cc': JSON.stringify(BB45cc), 'p': JSON.stringify(p), 'enPassantHistory': JSON.stringify(enPassantHistory),
          'whosTurn': whosTurn, 'castleHistory': JSON.stringify(castleHistory), 'castleCheckWhite': JSON.stringify(castleCheckWhite),
          'checkHistory': JSON.stringify(checkHistory), 'castleCheckBlack': JSON.stringify(castleCheckBlack),
          'checkWhite': JSON.stringify(checkWhite), 'checkBlack': JSON.stringify(checkBlack),
          'checkmateW': checkmateW, 'checkmateB': checkmateB, 'moveCount': moveCount,
          'side': side, 'depth': depth, 'eg': eg })
    
    var color = ['black','white','green','blue'], count=0
    
    worker.addEventListener('message', function(e) {
      var data = e.data, el = document.getElementById('progressbar').firstChild
      
      document.getElementById('progressbar').style.border = '1px solid black'
      
      if (data.total) total = data.total
      
      if (data.alert) alert( data.alert )
      
      if ( data.msg )
      {
        var num = data.msg.depth
        
        var str = '<span style="font-weight:bold; color:' + color[ num ] + ';">' + piecesPGN[ data.msg.piece ] + boardPositionNames[ data.msg.from ] 
        str += ( data.msg.pieceTaken ? 'x': '' ) + boardPositionNames[ data.msg.to]
        str += '<br />' + 'scr: ' + data.msg.score.toFixed(2) + ' ' + 'best: ' + data.msg.bstscore.toFixed(2)
        str += '<br />' + '&alpha;: ' + data.msg.alpha.toFixed(2) + ' ' + '&beta;: ' + data.msg.beta.toFixed(2) + '<font color="white" size="14px">' + data.msg.cutoff + '</font><br /><br /></span>'
        
        var f = function(){ 
            document.getElementById( 'cpu' + count ).innerHTML += str
        
            if ( num == depth )
            {
              document.getElementById( 'cpuRef' ).innerHTML += '<div id="cpu' + ++count + '" style="float:left; padding-left:5px;"></div>'
            }
          }
          
        setTimeout(f, 40)
      }
      
      if (data.count) el.style.height = (100 * (total-data.count) / total) + '%'
      
      if (data.move)
      {
        doClick()
        doSelect( parseInt(data.move[0]) )
        doClick()
        doSelect( parseInt(data.move[1]) )
        
        document.getElementById('processing').innerHTML = ''
        document.getElementById("progressbar").style.border = 'none'
        el.style.height = '100%'
      }
      
    }, false);
  }
}


/* Render Game*/
document.write('<div id="output"></div>')

document.write('<div id="score"></div>')

document.write('<div id="nav"><button id="back" onClick="doBack()">Back</button>&nbsp;<button id="forward" onClick="doForward()">Forward</button><br /><button onClick="confirmResign()">Resign Game</button></div>')

document.write('<div id="rotateBoard"><p style="color:white;font-weight:bold;">Rotate Board<br /><button id="counterClockwise" onClick="transformBoard(\'CC\')">CC</button>&nbsp;<button id="clockwise" onClick="transformBoard(\'CL\')">CL</button></p>')
document.write('<div id="gameNav"><p id="newGame"><button onClick="showNewGame()">New Game</button></p><div id="setPlayers" style="color:white;font-weight:bold;">Who\'s White?<br /><input type="radio" name="players" id="player1" value="S" checked="checked">S<br /><input type="radio" name="players" id="player2" value="G">G<br /><br /><button onClick="newGame()">Start Game</button></div>')
document.write('<p id="loadGame" style="text-align:center"><button onClick="manualLoad()">Load Game</button></p>')
document.write('<p id="saveGame" style="text-align:center"><button onClick="saveGame()">Save Game</button></p></div></div>')
$('#setPlayers').hide()

document.write('<div id="outputTwo"><p>Promote pawn to?&nbsp;<select id="promoteTo"><option value="2">Queen</option><option value="3">Rook</option><option value="4">Bishop</option><option value="5">Knight</option></select></p>')
document.write('<p><input type="checkbox" id="rules" />Enable rules<br /><input type="checkbox" id="animate" checked="checked" />Animate&nbsp;<input id="animate_speed" size="1" maxlength="3" value="1.0" />s</p><p style="color:#fff;margin-top:10px">Castle by moving the king</p></div>')
document.getElementById('promoteTo').value = 2
document.getElementById('animate').checked = true
document.getElementById('animate_speed').value = '1.0'

document.write('<div id="bagWhite"></div>')

document.write('<div id="bagBlack"></div>')

document.write('<div id="board"></div>')

document.write('<div id="cpuRef"><div id="cpu0" style="float:left;"></div></div>')

document.write('<div id="cpu">CPU:&nbsp;<select id="cpuOn"><option value="0" selected="selected">Off</option><option value="black">Black</option><option value="white">White</option></select>')
document.write('<br />Depth:&nbsp;<select id="cpuDepth"><option value="auto" selected="selected">Auto</option><option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option></select><div id="processing" style="margin-top:3px;"></div></div>')
document.write('<div id="progressbar"><div></div></div>')
document.getElementById('cpuOn').value = 0
document.getElementById('cpuDepth').value = 'auto'

document.write('<div id="stencilY"><div id="y8" class="numY">8</div><div id="y7" class="numY">7</div><div id="y6" class="numY">6</div><div id="y5" class="numY">5</div><div id="y4" class="numY">4</div><div id="y3" class="numY">3</div><div id="y2" class="numY">2</div><div id="y1" class="numY">1</div></div>')

document.write('<div id="stencilX"><div id="x1" class="numX">a</div><div id="x2" class="numX">b</div><div id="x3" class="numX">c</div><div id="x4" class="numX">d</div><div id="x5" class="numX">e</div><div id="x6" class="numX">f</div><div id="x7" class="numX">g</div><div id="x8" class="numX">h</div></div>')

document.write('<div id="tray1"></div>')
document.write('<div id="tray2"></div>')
$('tray1').hide()
$('tray2').hide()

renderBoard('white')

plotBoard(0)

score = az()

document.body.focus()

$.post( 'server.php', { getGame: true },
  function( data ) {
    var game = data
    if (game)
    {
      loadGame()
      $('#gameText').val( data )
      doLoad()
    }
        }
);

$(function() {
    $( "#stencilY" ).draggable({ axis: "x" });
    $( "#stencilX" ).draggable({ axis: "y" });
  });

//animate moves
function animateMove(id1, id2, speed, tray_id, promoteTo){
  var pos1, pos2
  
  pos1=$('#'+id1).position()
  pos2=$('#'+id2).position()
  
  $('#'+tray_id).css({
      left: pos1.left+200,
      top: pos1.top+5
  }).html( $('#'+id1).html() )
  
  $('#'+id1).html('')
  
  $('#'+tray_id).show()
  $('#'+tray_id).animate({
      "left": pos2.left+200+"px",
      "top": pos2.top+5+"px"}, speed)
  
  setTimeout(function() {
    if (!promoteTo) $('#'+id2).html( $('#'+tray_id).html() )
    else $('#'+id2).html( piecesHtml[promoteTo] )
    $('#'+tray_id).html('').hide()
    document.getSelection().removeAllRanges();
    }, speed+200);
}

// load cpu
function loadCpu()
{
  var el = document.getElementById("cpuOn"),
    depth = document.getElementById("cpuDepth").value
  
  if ( depth == 'auto' )
  {
    var x = countPieces()
    
    if ( x > 20 ) depth = 2
    if ( x < 21 && x > 12 ) depth = 3
    if ( x < 13 && x > 6 ) depth = 4
    if ( x < 7 ) depth = 5
  }
  else depth = document.getElementById("cpuDepth").value
  
  if ( el.value == 'white' && whosTurn && !checkmateW ) 
  {  
    var endgame = ( countPieces('b') < 6 ? 1 : 0 )
    if ( endgame ) depth--
  
    if ( Math.abs( rotation ) != 2 )
    {
      transformBoard('CC')
      transformBoard('CC')
    }
    cpu( 1, depth, endgame )
  }
  else if ( el.value == 'black' && !whosTurn && !checkmateB ) 
  {
    var endgame = ( countPieces('w') < 6 ? 1 : 0 )
    if ( endgame ) depth--
    
    cpu( 0, depth, endgame )
  }
  else if ( !el.value ) return false
}

function initCpu() 
{   
     var el = document.getElementById("cpuOn");   
     el.addEventListener("change", loadCpu, false);   
}
  
document.addEventListener("DOMContentLoaded", initCpu, false);
  
</script>

</body>
</html>